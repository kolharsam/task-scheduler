# services:
#   postgres:
#     build:
#       context: .
#       dockerfile: db_dockerfile
#     environment:
#       POSTGRES_DB: ${POSTGRES_DB}
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_HOST: postgres
#     volumes:
#       - ./data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
  
#   postgres_test:
#     build:
#       context: .
#       dockerfile: db_dockerfile
#     environment:
#       POSTGRES_DB: postgres_test
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_HOST: postgres
#     ports:
#       - "9090:5432"
#     profiles:
#       - test
    
#   scheduler_api:
#     build:
#       context: .
#       dockerfile: scheduler_api_dockerfile
#     environment:
#       POSTGRES_DB: ${POSTGRES_DB}
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_HOST: postgres
#     ports:
#       - "8080:8080"
#     depends_on:
#       - postgres

#   ring_leader:
#     build:
#       context: .
#       dockerfile: ring_leader_dockerfile
#     environment:
#       POSTGRES_DB: ${POSTGRES_DB}
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_HOST: postgres
#     ports:
#       - "8081:8081"
#     depends_on:
#       - postgres
#       - scheduler_api

#   worker:
#     build:
#       context: .
#       dockerfile: worker_dockerfile
#     environment:
#       WORKER_ADDRESS: worker
#     # deploy:
#     #   mode: replicated
#     #   replicas: 2
#     depends_on:
#       - ring_leader

networks:
  task_network:
    driver: bridge

volumes:
  postgres_data:

services:
  postgres:
    build:
      context: .
      dockerfile: db_dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - task_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # postgres_test:
  #   # ... (same as before)
  #   networks:
  #     - task_network

  scheduler_api:
    build:
      context: .
      dockerfile: scheduler_api_dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - task_network

  ring_leader:
    build:
      context: .
      dockerfile: ring_leader_dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      scheduler_api:
        condition: service_started
    networks:
      - task_network

  worker:
    build:
      context: .
      dockerfile: worker_dockerfile
    environment:
      WORKER_ADDRESS: worker
      RING_LEADER_HOST: ring_leader
      RING_LEADER_PORT: 8081
    depends_on:
      ring_leader:
        condition: service_started
    networks:
      - task_network
